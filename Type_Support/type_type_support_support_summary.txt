
Additional basic types and macros (defined in header <cstddef>)
    > size_t            unsigned integer type returned by the sizeof operator (typedef)
    > ptrdiff_t         signed integer type returned when subtracting two pointer(typedef)
    > nullptr_t         the type of the null pointer literal nullptr (typedef)
    > NULL              implementation-defined null pointer constant (macro constant)
    > max_align_t       POD type with alignment requirement as great as any other scalar type (typedef)
    > offsetof          byte offset from the beginning of a standard-layout type to specified member (function macro)

    (Defined in header <cstdtool>)
    > __bool_true_fase_are_defined      C compatibility macro constant, expends to integer constant 1 (macro constant)

    (Defined in header <cstdalign>)
    > __aligns_is_defined               C compatibility macro constant, expends to integer constant 1 (macro constant)

Numeric Limits (defined in header <limits>)
    > umeric_limits                     provide an interface to query properties of all fundamental numeric types (class  template)
    Template parameters
    T 	- 	a type to retrieve numeric properties for
Member constants
    is_specialized      identifies types for which std::numeric_limits is specialized
    is_signed           identifies signed types
    is_integer          identifies integer types
    is_exact            identifies exact types
    has_infinity        identifies floating-point types that can represent the special value "positive infinity"
    has_quiet_NaN       identifies floating-point types that can represent the special value "quiet not-a-number" (NaN)
    has_signaling_NaN   identifies floating-point types that can represent the special value "signaling not-a-number" (NaN)
    has_denorm          identifies the denormalization style used by the floating-point type
    has_denorm_loss     identifies the floating-point types that detect loss of precision as denormalization loss rather than inexact result
    round_style         identifies the rounding style used by the type
    is_iec559           identifies the IEC 559/IEEE 754 floating-point types
    is_bounded          identifies types that represent a finite set of values
    is_modulo           identifies types that handle overflows with modulo arithmetic
    digits              number of radix digits that can be represented without change
    digits10            number of decimal digits that can be represented without change
    max_digits10        number of decimal digits necessary to differentiate all values of this type
    radix               the radix or integer base used by the representation of the given type
    min_exponent        one more than the smallest negative power of the radix that is a valid normalized floating-point value
    min_exponent10      the smallest negative power of ten that is a valid normalized floating-point value
    max_exponent        one more than the largest integer power of the radix that is a valid finite floating-point value
    max_exponent10      the largest integer power of 10 that is a valid finite floating-point value
    traps               identifies types which can cause arithmetic operations to trap
    tinyness_before 	identifies floating-point types that detect tinyness before rounding

Member functions
    min                 returns the smallest finite value of the given type
    lowest              returns the lowest finite value of the given type
    max                 returns the largest finite value of the given type
    epsilon             returns the difference between 1.0 and the next representable value of the given floating-point type
    round_error         returns the maximum rounding error of the given floating-point type
    infinity            returns the positive infinity value of the given floating-point type
    quiet_NaN           returns a quiet NaN value of the given floating-point type
    signaling_NaN       returns a signaling NaN value of the given floating-point type
    denorm_min          returns the smallest positive subnormal value of the given floating-point type

Helper classes
    float_round_style   indicates floating-point rounding modes
    float_denorm_style  indicates floating-point denormalization modes


C Numeric Limits Interface

Runtime Type Identification
    > type_info     contains some type's information, generated by implementation.
                    This is a class returned by typeid operator
    > type_index    wrapper around a type_info object, that can be used as index in associated and unordered
                    associative containers (class)
    > bad_typeid    exception that is thrown if an argument in a typeid expression is null (class)
    > bad_cast      exception that is thrown by  an invalid dynamic_cast expression i.e. cast of reference
                    type fails (class)

Type Traits (since C++11)
    Type traits defined a compile-time template-based interface to query or modify the
    properties of types. Any attempts to specialize any of the class template listed in
    This section results in undefined behavior, except that std::common_type may be
    specialized if the specialization depends on user-defined type

    (defined in header <type_traits>)

    Primary Type Categories
    > is_void                       checks if a type is void
    > is_null_pointer               checks if a type is std::nullptr_t
    > is_integral                   checks if a type is integral type
    > is_floating_point             checks is a type is floating-point type
    > is_array                       checks if a type is an array
    > is_enum                        "                   an enumeration type
    > is_union                       "                   an union type
    > is_class                       "                   a non-union class type
    > is_function                    "                   a function type
    > is_pointer                     "                   a pointer type
    > is_l-value_reference           "                   l-value reference
    > is_r-value_reference           "                   r-value reference
    > is_member_object_pointer       "                   a pointer to a non-static member object
    > is_member_function_pointer     "                   a pointer to a non-static member function

    Composite Type Categories
    > is_fundamental                 "                   fundamental type
    > is_arithmetic                  "                   arithmetic type
    > is_scalar                      "                   scalar type
    > is_object                      "                   object type
    > is_compound                    "                   compound type
    > is_reference                   "                   either l-value or r-value reference
    > is_member_pointer              "                   a pointer to a non-static member function or object

    Type Properties
    > is_const                       "                   const-qualified
    > is_volatile                    "                   volatile-qualified
    > is_trivial                     "                   trivial
    > is_trivially_copyable          "                   trivially copyable
    > is_standard_layout             "                   standard layout type
    > is_pod                         "                   plain-old date (POD) type
    > is_literal_type                "                   literal type
    > is_empty                       "                   class (not union) type and has no data
    > is_polymorphic                 "                   polymorphic class type
    > is_final                       "                   a final class type
    > is_abstract                    "                   abstract class type
    > is_singed                      "                   signed arithmetic type
    > is_unsigned                    "                   unsigned arithmetic type

    Support Operation
    (I skip this part)

    Property Query
    > lignment_of           obtains the type's alignment requirement (class template)
    > rank                  obtains the number of dimensions of an array type (class template)
    > extent                obtains the size of an array type along a specified dimension (class template)

    Type Relationship
    > is_same               checks if two types are the same
    > is_base_of            checks if a type is derived form the other type
    > is_convertible        checks if at ype can be converted to the other type

Type Modifications
Type modification template create new type definitions by applying modification of a
template parameter. The resulting type can then be accessed through type member typedef.

    > onst-volatile Specifier
    > remove_cv                 removes const or/and volatile specified form the given type
    > remove_const              "
    > remove_volatile           "
    > add_cv                    adds const or/and volatile specified to the given type
    > add_const                 "
    > add_volatile              "

    Reference
    > remove_reference          removes reference from the given type
    > add_lvalue_reference      adds l-value or r-value reference to the given type
    > add_rvalue_reference      "

    Pointer
    > remove_pointer            removes pointer from the given type
    > add_pointer               adds pointer to the given type

    Sing Modifiers
    > make_singed               makes the given integral type singed
    > make_unsigned             makes the given integral type unsigned

    Array
    > remove_extent             removes one extent from the given array type
    > remove_all_extents        removes all extents from the given array type

Miscellaneous Transformations (in header <type_traits>
    > aligned_storage           defines the type suitable for use as uninitialized storage for type of given size
    > aligned_union             defines the type suitable for use as uninitialized storage for all given types
    > decay                     applies type transformations as when passing a function argument by value
    > enable_if                 hides a function overload or template specialization based on compile-time boolean
    > conditional               chooses one type of another based on compile-type boolean
    > common_type               deduces the result type of mixed-mode arithmetic expression
    > underlying_type           obtains the underlying integer type for a given enumeration type
    > result_of                 deduces the return type of a function call expression
    > void_t                    void variadic alias template

Operations on Traits ( in header <type_traits>)
    > conjunction               variadic logical AND metafunction
    > disjunction               variadic logical OR  metafunction
    > negation                  variadic logical NOT metafunction















