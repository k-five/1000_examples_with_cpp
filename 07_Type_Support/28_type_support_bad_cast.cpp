/* Started on November 14th in 2016 */
/* more examples in github.com/k-five */
/*
            Type Support
            ************

Runtime Type Identification (Defined in header <typeinfo>)

    > type_info     contains some type's information, generated by implementation.
                    This is a class returned by typeid operator
    > type_index    wrapper around a type_info object, that can be used as index in associated and unordered
                    associative containers (class)
    > bad_typeid    exception that is thrown if an argument in a typeid expression is null (class)
    > bad_cast      exception that is thrown by  an invalid dynamic_cast expression i.e. cast of reference
                    type fails (class)
*/
/// std::bad_cast
// An exception of this type is thrown when a dynamic_cast to a
// reference type fails the run-time check (e.g. because the type
// are not related by inheritance ), and also from std::use_facet
// if the requested facet does not exist in the locale.
//
//    member function
//    (destructor)   [virtual]   destructs the exception object  (virtual public member function of std::exception)
//    what            [virtual]   returns an explanatory string   (virtual public member function of std::exception)


#include <iostream>
#include <typeinfo>

struct A { virtual ~A() {} };

struct B { virtual ~B() {} };


int main(){
    B b;
    try { A& a = dynamic_cast<A&>(b); }
    catch (const std::bad_cast& be) { std::cout << be.what() << std::endl; }
}
