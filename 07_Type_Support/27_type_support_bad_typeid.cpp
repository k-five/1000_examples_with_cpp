/* Started on November 14th in 2016 */
/* more examples in github.com/k-five */
/*
            Type Support
            ************

Runtime Type Identification (Defined in header <typeinfo>)

    > type_info     contains some type's information, generated by implementation.
                    This is a class returned by typeid operator
    > type_index    wrapper around a type_info object, that can be used as index in associated and unordered
                    associative containers (class)
    > bad_typeid    exception that is thrown if an argument in a typeid expression is null (class)
    > bad_cast      exception that is thrown by  an invalid dynamic_cast expression i.e. cast of reference
                    type fails (class)
*/
/// std::bad_typeid
//    Defined in header <typeinfo>
//
//    class bad_typeid : public std::exception;
//
//    An exception of this type is thrown when a typeid operator is
//    applied to a dereferenced null pointer value of a polymorphic type.
//
//    Member functions
//    (destructor)    [virtual]   destructs the exception object      (virtual public member function of std::exception)
//    what            [virtual]   returns an explanatory string   (virtual public member function of std::exception)


#include <iostream>
#include <typeinfo>

struct S { // the type has to be polymorphic
    virtual void f();
};


int main(){
    S* ptr = nullptr;

    try { std::cout << typeid(*ptr).name() << std::endl; }
    catch (const std::bad_typeid& err) { std::cout << err.what() << std::endl; }
}
