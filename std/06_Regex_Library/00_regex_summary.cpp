/*
            The Regular Expression Library
            ******************************
Defined in header <regex>

The regular expression library provides a class that represents regular
expressions, which are a kind of mini-language used to perform pattern
matching within strings. Almost all operation whit regexes can be ____
characterized by operating on several of the following objects.

>   Target sequence: The character sequence that is searched for a pattern
    This may be a range specified by two iterator, a null-terminated character
    or std::string

>   pattern:  This is the regular expressing itself. It determines what constitutes
    a match. It is an object of type std::basic_regex, constructed form a string
    with special syntax. See syntax_option_type for the description of supported
    syntax variation.

>   Matched array: The information about matches may be retrieved as an object of
    type std::match_results.

>   Replacement string: This is sting that determines how to replace the matches.
    See match_flag_type for the description of supported syntax variation.

--> Main class:
    These classes encapsulate a regular expression and the results of
    matching a regular expression within a target sequence of characters.

>   basic_regex:    regular expression library
>   sub_match:      identifies the sequence of characters matched by a sub-expression
>   match_results:  identifies one regular expression match, including all sub-expression

--> Algorithms:
    These functions are used to apply the regular expression encapsulated in a regex
    to a  target sequence of character.

>   regex_match:    attempts to match a regular expression to an entire character sequence
>   regex_search:   attempts to match a regular expression to any part of a character sequence
>   regex_replace:  replace occurrences of a regular expression with formatted replacement text

--> Iterators:
    The regex iterator are used to traverse the entire set of regular expression matches found
    within a sequence.

>   regex_iterator:         iterators through all regex matches within a character sequence
>   regex_token_iterator:   iterators through the specific sub-expression within all regex
                            matches in a given string or through unmatch substring

--> Exception:
    This class defines the type of object thrown as exceptions to report errors from the
    regular expression library.

>   regex_error:    reports errors generated by the regular expression library

--> Traits:
    The regex traits class is used to encapsulate the localizable aspect of a regex.

>   regex_traits:   provides meta-information about a character type, required by the regex library

--> Constants:
    Defined a namespace std::regex_constants

>   syntax_option_type: general options controlling regex behavior
>   match_flag_type:    option specific to matching
>   error_type:

*/
