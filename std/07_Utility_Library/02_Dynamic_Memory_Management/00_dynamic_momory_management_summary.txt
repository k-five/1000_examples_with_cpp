/*
        Dynamic Memory Management
        *************************

Smart Pointer:
Smart pointers enable automatic, exception-safe, object lifetime management.

Pointer Category (defined in header <memory>)
    > unique_ptr                    smart pointer with unique object ownership semantics
    > shared_ptr                    smart pointer with shared object ownership semantics
    > weak_ptr                      weak reference to an object managed by std::shared_ptr
    > auto_ptr                      smart pointer with strict object ownership semantics
    helper classes
    > owner_less                    provide mixed-type owner-based ordering of shared and weak pointers
    > enable_shared_from_this       allows an object to create a shared_ptr referring to itself
    > bad_weak_ptr                  exception thrown when accessing a weak_ptr which refers to already destroyed object
    > default_delete                default deleter for unique_ptr

Allocators:
Allocators are class template encapsulating memory allocating strategy.
This allows generic containers to decouple memory management from the data itself.

    > allocator                     the default allocator
    > allocator_traits              provides information about allocator types
    > allocator_arg_t               tag type used to select allocator-aware constructor overloads
    > allocator_arg                 an object of type std::allocator_arg_t used to select allocator-aware
    > uses_allocator                checks if the specified type supports uses-allocator construction
    (in header file: <scoped_allocator>)
    > scoped_allocator_adapter      implements multi-level allocator for multi-level containers

Uninitialized Storage: (defined in header <memory>)
Several utilities are provided to create and access raw storage
    > uninitialized_copy            copies a rage of object to an uninitialized area of memory
    > uninitialized_copy_n          copies a number of objects to an uninitialized area of memory
    > uninitialized_fill            copies an object to an uninitialized area of memory
    > uninitialized_fill_n          copies an object to an uninitialized area of memory
    > raw_storage_iterator          an iterator that allows standard algorithms to store results in uninitialized memory
    > get_temporary_buffer          obtains uninitialized storage
    > return_temporary_buffer       frees uninitialized storage

Garbage Collector Support ( in header <memory>)
    > declare_reachable             declared that an object cannot be recycled
    > undeclare_reachable           declared that an object can be recycled
    > declare_no_pointers           declares that a memory area does not contain traceable pointers
    > undeclare_no_pointers         cancels the effect of std::declare_no_pointer
    > pointer_safety                lists pointer safety models
    > get_pointer_safety            returns the current pointer safety model

Miscellaneous (in header <memory>)
    > pointer_traits                provides information about pointer-like types
    > addressof                     obtains actual address of an object, even if that & operator is overloaded
    > align                         aligns a pointer in a buffer

C-style Memory Management (defined in header <cstdlib>)
    > std::malloc
    > std::calloc
    > std::realloc
    > std::free

Low Level Memory Management (defined is header <new>)

    The new-expression is the only way to create an object or an array of object
    with dynamic storage duration, that is, with lifetime not restricted to the
    scope in which it is created.
    A new-expression obtains storage by calling an allocation function. A delete-expression
    destroys a most derived object or an array created by a new-expression and calls
    the deallocation function. The default allocation and deallocation functions, along
    with related functions types, and objects, are declared in the header <new>.

    > operator new
    > operator delete
    > std::get_new_handler
    > std::set_new_handler
    > std::bad_alloc
    > std::bad_array_new_length
    > std::nothrow_t
    > std::new_handler
    > std::nothrow
