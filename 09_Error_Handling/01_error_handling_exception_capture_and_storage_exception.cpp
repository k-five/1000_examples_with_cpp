/*
            Error Handling
            **************


1.  Exception Handling:
    The header <exception> provides several classes and function related
    to exception handling in C++ program. (defined in header <exception>)

    1.1 capture and storage of exception object
        > exception             : base class for exceptions thrown by the standard library components
        > uncaught_exception    : checks if exception handling is currently is progress
        > uncaught_exceptions   : "
        > make_exception_ptr    : shared pointer type for handling exception objects
        > current_exception     : capture the current exception in a std::exception_ptr
        > rethrow_exception     : throw an exception from a std::exception_ptr
        > nested_exception      : a mixin type to capture and store current exceptions
        > throw_with_nested     : throw its argument with std::nested_exception mixed in
        > rethrow_if_nested     : throw the exception from a std::nested_exception

*/
/// std::exception
// Provides consistent interface to handle errors through the throw exception.
// All exceptions generated by the standard library inherit from std::exception.
/*
    logic error
        invalid_argument
        domain_error
        length_error
        out_of_range
        future_error c++11

    runtime_error
        range_error
        overflow_error
        underflow_error
        regex_error c++11
        system_error c++11
            ios_base::failure c++11

    bad_typeid
    bad_cast
    bad_weak_ptr
    bad_function_call c++11
    bad_alloc
        bad_array_new_length c++11
    bad_exception
    ios_base::failure until c++11
*/
#include <iostream>
#include <new>


int main(){

}
