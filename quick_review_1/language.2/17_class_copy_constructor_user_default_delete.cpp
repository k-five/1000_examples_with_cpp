/*
            language 2
            **********
written and tested on code::block 16.01
                      Ubuntu 16.01
            **********
1. Classes
2. Templates
3. Exceptions
4. Statements
5. Miscellaneous

*/
/// class
//  copy constructor
//


/******************/
#include <iostream>
#include <algorithm>

//
class A {
private:
    const char* name = "";

public:
    A( const char* temp ) : name( temp ){
        puts( "default constructor..." );
    }         // default constructor

    A( const A& other ) : name( other.name ){
        puts( "copy constructor by user..." );
    }     // copy constructor by user

    void print(){
        puts( name );
    }
};


class B {
private:
    const char* name = "";

public:
    B( const char* temp ) : name( temp ){
        puts( "default constructor..." );
    }         // default constructor

    B( const B& other ) = default;  // forcing a copy constructor to be generated by the complier

    void print(){
        puts( name );
    }
};


class C {
private:
    const char* name = "";

public:
    C( const char* temp ) : name( temp ){
        puts( "default constructor..." );
    }         // default constructor

    C( const C& other ) = delete;  // avoiding implicit generation of the copy constructor

    void print(){
        puts( name );
    }
};



int main(){

    A a_obj( "a_obj" );
    A copy_of_a( a_obj );   // copy constructor by user

    B b_obj( "b_obj" );
    B copy_of_b( b_obj );   // copy constructor by complier

    C c_obj( "c_obj" );
    // error: use of deleted function ‘C::C(const C&)’
    C copy_of_c( c_obj );   // not allowed

}

/* output:



*/
